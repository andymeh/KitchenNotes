#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KitchenNotesDAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="KitchenNotesDatabase")]
	public partial class DALDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertHub(Hub instance);
    partial void UpdateHub(Hub instance);
    partial void DeleteHub(Hub instance);
    partial void InsertNote(Note instance);
    partial void UpdateNote(Note instance);
    partial void DeleteNote(Note instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserHub(UserHub instance);
    partial void UpdateUserHub(UserHub instance);
    partial void DeleteUserHub(UserHub instance);
    #endregion
		
		public DALDataContext() : 
				base(global::KitchenNotesDAL.Properties.Settings.Default.KitchenNotesDatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DALDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DALDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DALDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DALDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Hub> Hubs
		{
			get
			{
				return this.GetTable<Hub>();
			}
		}
		
		public System.Data.Linq.Table<Note> Notes
		{
			get
			{
				return this.GetTable<Note>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserHub> UserHubs
		{
			get
			{
				return this.GetTable<UserHub>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hub")]
	public partial class Hub : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _HubId;
		
		private string _HubName;
		
		private EntitySet<UserHub> _UserHubs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHubIdChanging(System.Guid value);
    partial void OnHubIdChanged();
    partial void OnHubNameChanging(string value);
    partial void OnHubNameChanged();
    #endregion
		
		public Hub()
		{
			this._UserHubs = new EntitySet<UserHub>(new Action<UserHub>(this.attach_UserHubs), new Action<UserHub>(this.detach_UserHubs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HubId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid HubId
		{
			get
			{
				return this._HubId;
			}
			set
			{
				if ((this._HubId != value))
				{
					this.OnHubIdChanging(value);
					this.SendPropertyChanging();
					this._HubId = value;
					this.SendPropertyChanged("HubId");
					this.OnHubIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HubName", DbType="NChar(20)")]
		public string HubName
		{
			get
			{
				return this._HubName;
			}
			set
			{
				if ((this._HubName != value))
				{
					this.OnHubNameChanging(value);
					this.SendPropertyChanging();
					this._HubName = value;
					this.SendPropertyChanged("HubName");
					this.OnHubNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hub_UserHub", Storage="_UserHubs", ThisKey="HubId", OtherKey="HubId")]
		public EntitySet<UserHub> UserHubs
		{
			get
			{
				return this._UserHubs;
			}
			set
			{
				this._UserHubs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserHubs(UserHub entity)
		{
			this.SendPropertyChanging();
			entity.Hub = this;
		}
		
		private void detach_UserHubs(UserHub entity)
		{
			this.SendPropertyChanging();
			entity.Hub = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Notes")]
	public partial class Note : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _NoteId;
		
		private string _Note1;
		
		private System.DateTime _DateAdded;
		
		private System.Nullable<System.Guid> _UserHubId;
		
		private EntityRef<UserHub> _UserHub;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNoteIdChanging(System.Guid value);
    partial void OnNoteIdChanged();
    partial void OnNote1Changing(string value);
    partial void OnNote1Changed();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnUserHubIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserHubIdChanged();
    #endregion
		
		public Note()
		{
			this._UserHub = default(EntityRef<UserHub>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoteId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid NoteId
		{
			get
			{
				return this._NoteId;
			}
			set
			{
				if ((this._NoteId != value))
				{
					this.OnNoteIdChanging(value);
					this.SendPropertyChanging();
					this._NoteId = value;
					this.SendPropertyChanged("NoteId");
					this.OnNoteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Note", Storage="_Note1", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Note1
		{
			get
			{
				return this._Note1;
			}
			set
			{
				if ((this._Note1 != value))
				{
					this.OnNote1Changing(value);
					this.SendPropertyChanging();
					this._Note1 = value;
					this.SendPropertyChanged("Note1");
					this.OnNote1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserHubId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserHubId
		{
			get
			{
				return this._UserHubId;
			}
			set
			{
				if ((this._UserHubId != value))
				{
					if (this._UserHub.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserHubIdChanging(value);
					this.SendPropertyChanging();
					this._UserHubId = value;
					this.SendPropertyChanged("UserHubId");
					this.OnUserHubIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserHub_Note", Storage="_UserHub", ThisKey="UserHubId", OtherKey="UserHubId", IsForeignKey=true)]
		public UserHub UserHub
		{
			get
			{
				return this._UserHub.Entity;
			}
			set
			{
				UserHub previousValue = this._UserHub.Entity;
				if (((previousValue != value) 
							|| (this._UserHub.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserHub.Entity = null;
						previousValue.Notes.Remove(this);
					}
					this._UserHub.Entity = value;
					if ((value != null))
					{
						value.Notes.Add(this);
						this._UserHubId = value.UserHubId;
					}
					else
					{
						this._UserHubId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("UserHub");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private string _Username;
		
		private string _Forename;
		
		private string _Surname;
		
		private string _Password;
		
		private System.DateTime _DOB;
		
		private string _Email;
		
		private bool _RememberMe;
		
		private EntitySet<UserHub> _UserHubs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnForenameChanging(string value);
    partial void OnForenameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnDOBChanging(System.DateTime value);
    partial void OnDOBChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnRememberMeChanging(bool value);
    partial void OnRememberMeChanged();
    #endregion
		
		public User()
		{
			this._UserHubs = new EntitySet<UserHub>(new Action<UserHub>(this.attach_UserHubs), new Action<UserHub>(this.detach_UserHubs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Forename", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Forename
		{
			get
			{
				return this._Forename;
			}
			set
			{
				if ((this._Forename != value))
				{
					this.OnForenameChanging(value);
					this.SendPropertyChanging();
					this._Forename = value;
					this.SendPropertyChanged("Forename");
					this.OnForenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NChar(40) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="Date NOT NULL")]
		public System.DateTime DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RememberMe", DbType="Bit NOT NULL")]
		public bool RememberMe
		{
			get
			{
				return this._RememberMe;
			}
			set
			{
				if ((this._RememberMe != value))
				{
					this.OnRememberMeChanging(value);
					this.SendPropertyChanging();
					this._RememberMe = value;
					this.SendPropertyChanged("RememberMe");
					this.OnRememberMeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserHub", Storage="_UserHubs", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UserHub> UserHubs
		{
			get
			{
				return this._UserHubs;
			}
			set
			{
				this._UserHubs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserHubs(UserHub entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserHubs(UserHub entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserHub")]
	public partial class UserHub : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserHubId;
		
		private System.Guid _UserId;
		
		private System.Guid _HubId;
		
		private EntitySet<Note> _Notes;
		
		private EntityRef<Hub> _Hub;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserHubIdChanging(System.Guid value);
    partial void OnUserHubIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnHubIdChanging(System.Guid value);
    partial void OnHubIdChanged();
    #endregion
		
		public UserHub()
		{
			this._Notes = new EntitySet<Note>(new Action<Note>(this.attach_Notes), new Action<Note>(this.detach_Notes));
			this._Hub = default(EntityRef<Hub>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserHubId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserHubId
		{
			get
			{
				return this._UserHubId;
			}
			set
			{
				if ((this._UserHubId != value))
				{
					this.OnUserHubIdChanging(value);
					this.SendPropertyChanging();
					this._UserHubId = value;
					this.SendPropertyChanged("UserHubId");
					this.OnUserHubIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HubId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid HubId
		{
			get
			{
				return this._HubId;
			}
			set
			{
				if ((this._HubId != value))
				{
					if (this._Hub.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHubIdChanging(value);
					this.SendPropertyChanging();
					this._HubId = value;
					this.SendPropertyChanged("HubId");
					this.OnHubIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserHub_Note", Storage="_Notes", ThisKey="UserHubId", OtherKey="UserHubId")]
		public EntitySet<Note> Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				this._Notes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hub_UserHub", Storage="_Hub", ThisKey="HubId", OtherKey="HubId", IsForeignKey=true)]
		public Hub Hub
		{
			get
			{
				return this._Hub.Entity;
			}
			set
			{
				Hub previousValue = this._Hub.Entity;
				if (((previousValue != value) 
							|| (this._Hub.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hub.Entity = null;
						previousValue.UserHubs.Remove(this);
					}
					this._Hub.Entity = value;
					if ((value != null))
					{
						value.UserHubs.Add(this);
						this._HubId = value.HubId;
					}
					else
					{
						this._HubId = default(System.Guid);
					}
					this.SendPropertyChanged("Hub");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserHub", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserHubs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserHubs.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.UserHub = this;
		}
		
		private void detach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.UserHub = null;
		}
	}
}
#pragma warning restore 1591
