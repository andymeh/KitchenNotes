#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KitchenNotesDAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="KitchNotesDatabase")]
	public partial class DALDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertHub(Hub instance);
    partial void UpdateHub(Hub instance);
    partial void DeleteHub(Hub instance);
    partial void InsertHubEvent(HubEvent instance);
    partial void UpdateHubEvent(HubEvent instance);
    partial void DeleteHubEvent(HubEvent instance);
    partial void InsertNotes(Notes instance);
    partial void UpdateNotes(Notes instance);
    partial void DeleteNotes(Notes instance);
    partial void InsertTasks(Tasks instance);
    partial void UpdateTasks(Tasks instance);
    partial void DeleteTasks(Tasks instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserHub(UserHub instance);
    partial void UpdateUserHub(UserHub instance);
    partial void DeleteUserHub(UserHub instance);
    #endregion
		
		public DALDataContext() : 
				base(global::KitchenNotesDAL.Properties.Settings.Default.KitchNotesDatabaseConnectionString3, mappingSource)
		{
			OnCreated();
		}
		
		public DALDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DALDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DALDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DALDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Hub> Hubs
		{
			get
			{
				return this.GetTable<Hub>();
			}
		}
		
		public System.Data.Linq.Table<HubEvent> HubEvents
		{
			get
			{
				return this.GetTable<HubEvent>();
			}
		}
		
		public System.Data.Linq.Table<Notes> Notes
		{
			get
			{
				return this.GetTable<Notes>();
			}
		}
		
		public System.Data.Linq.Table<Tasks> Tasks
		{
			get
			{
				return this.GetTable<Tasks>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserHub> UserHubs
		{
			get
			{
				return this.GetTable<UserHub>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hub")]
	public partial class Hub : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _HubId;
		
		private string _HubName;
		
		private string _HubAddress;
		
		private string _HubLocation;
		
		private EntitySet<UserHub> _UserHubs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHubIdChanging(System.Guid value);
    partial void OnHubIdChanged();
    partial void OnHubNameChanging(string value);
    partial void OnHubNameChanged();
    partial void OnHubAddressChanging(string value);
    partial void OnHubAddressChanged();
    partial void OnHubLocationChanging(string value);
    partial void OnHubLocationChanged();
    #endregion
		
		public Hub()
		{
			this._UserHubs = new EntitySet<UserHub>(new Action<UserHub>(this.attach_UserHubs), new Action<UserHub>(this.detach_UserHubs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HubId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid HubId
		{
			get
			{
				return this._HubId;
			}
			set
			{
				if ((this._HubId != value))
				{
					this.OnHubIdChanging(value);
					this.SendPropertyChanging();
					this._HubId = value;
					this.SendPropertyChanged("HubId");
					this.OnHubIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HubName", DbType="NChar(20)")]
		public string HubName
		{
			get
			{
				return this._HubName;
			}
			set
			{
				if ((this._HubName != value))
				{
					this.OnHubNameChanging(value);
					this.SendPropertyChanging();
					this._HubName = value;
					this.SendPropertyChanged("HubName");
					this.OnHubNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HubAddress", DbType="NChar(100)")]
		public string HubAddress
		{
			get
			{
				return this._HubAddress;
			}
			set
			{
				if ((this._HubAddress != value))
				{
					this.OnHubAddressChanging(value);
					this.SendPropertyChanging();
					this._HubAddress = value;
					this.SendPropertyChanged("HubAddress");
					this.OnHubAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HubLocation", DbType="NChar(20)")]
		public string HubLocation
		{
			get
			{
				return this._HubLocation;
			}
			set
			{
				if ((this._HubLocation != value))
				{
					this.OnHubLocationChanging(value);
					this.SendPropertyChanging();
					this._HubLocation = value;
					this.SendPropertyChanged("HubLocation");
					this.OnHubLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hub_UserHub", Storage="_UserHubs", ThisKey="HubId", OtherKey="HubId")]
		public EntitySet<UserHub> UserHubs
		{
			get
			{
				return this._UserHubs;
			}
			set
			{
				this._UserHubs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserHubs(UserHub entity)
		{
			this.SendPropertyChanging();
			entity.Hub = this;
		}
		
		private void detach_UserHubs(UserHub entity)
		{
			this.SendPropertyChanging();
			entity.Hub = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HubEvents")]
	public partial class HubEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _HubEventId;
		
		private System.Guid _UserHubId;
		
		private string _Name;
		
		private string _Description;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private string _Importance;
		
		private System.DateTime _DateAdded;
		
		private EntityRef<UserHub> _UserHub;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHubEventIdChanging(System.Guid value);
    partial void OnHubEventIdChanged();
    partial void OnUserHubIdChanging(System.Guid value);
    partial void OnUserHubIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnImportanceChanging(string value);
    partial void OnImportanceChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public HubEvent()
		{
			this._UserHub = default(EntityRef<UserHub>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HubEventId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid HubEventId
		{
			get
			{
				return this._HubEventId;
			}
			set
			{
				if ((this._HubEventId != value))
				{
					this.OnHubEventIdChanging(value);
					this.SendPropertyChanging();
					this._HubEventId = value;
					this.SendPropertyChanged("HubEventId");
					this.OnHubEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserHubId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserHubId
		{
			get
			{
				return this._UserHubId;
			}
			set
			{
				if ((this._UserHubId != value))
				{
					if (this._UserHub.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserHubIdChanging(value);
					this.SendPropertyChanging();
					this._UserHubId = value;
					this.SendPropertyChanged("UserHubId");
					this.OnUserHubIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Importance", DbType="NChar(20)")]
		public string Importance
		{
			get
			{
				return this._Importance;
			}
			set
			{
				if ((this._Importance != value))
				{
					this.OnImportanceChanging(value);
					this.SendPropertyChanging();
					this._Importance = value;
					this.SendPropertyChanged("Importance");
					this.OnImportanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserHub_HubEvent", Storage="_UserHub", ThisKey="UserHubId", OtherKey="UserHubId", IsForeignKey=true)]
		public UserHub UserHub
		{
			get
			{
				return this._UserHub.Entity;
			}
			set
			{
				UserHub previousValue = this._UserHub.Entity;
				if (((previousValue != value) 
							|| (this._UserHub.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserHub.Entity = null;
						previousValue.HubEvents.Remove(this);
					}
					this._UserHub.Entity = value;
					if ((value != null))
					{
						value.HubEvents.Add(this);
						this._UserHubId = value.UserHubId;
					}
					else
					{
						this._UserHubId = default(System.Guid);
					}
					this.SendPropertyChanged("UserHub");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Notes")]
	public partial class Notes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _NoteId;
		
		private string _Note;
		
		private System.DateTime _DateAdded;
		
		private System.Guid _UserHubId;
		
		private System.Nullable<System.DateTime> _DateEdited;
		
		private System.Nullable<System.DateTime> _DateHidden;
		
		private EntityRef<UserHub> _UserHub;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNoteIdChanging(System.Guid value);
    partial void OnNoteIdChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnUserHubIdChanging(System.Guid value);
    partial void OnUserHubIdChanged();
    partial void OnDateEditedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateEditedChanged();
    partial void OnDateHiddenChanging(System.Nullable<System.DateTime> value);
    partial void OnDateHiddenChanged();
    #endregion
		
		public Notes()
		{
			this._UserHub = default(EntityRef<UserHub>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoteId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid NoteId
		{
			get
			{
				return this._NoteId;
			}
			set
			{
				if ((this._NoteId != value))
				{
					this.OnNoteIdChanging(value);
					this.SendPropertyChanging();
					this._NoteId = value;
					this.SendPropertyChanged("NoteId");
					this.OnNoteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserHubId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserHubId
		{
			get
			{
				return this._UserHubId;
			}
			set
			{
				if ((this._UserHubId != value))
				{
					if (this._UserHub.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserHubIdChanging(value);
					this.SendPropertyChanging();
					this._UserHubId = value;
					this.SendPropertyChanged("UserHubId");
					this.OnUserHubIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEdited", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateEdited
		{
			get
			{
				return this._DateEdited;
			}
			set
			{
				if ((this._DateEdited != value))
				{
					this.OnDateEditedChanging(value);
					this.SendPropertyChanging();
					this._DateEdited = value;
					this.SendPropertyChanged("DateEdited");
					this.OnDateEditedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateHidden", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateHidden
		{
			get
			{
				return this._DateHidden;
			}
			set
			{
				if ((this._DateHidden != value))
				{
					this.OnDateHiddenChanging(value);
					this.SendPropertyChanging();
					this._DateHidden = value;
					this.SendPropertyChanged("DateHidden");
					this.OnDateHiddenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserHub_Note", Storage="_UserHub", ThisKey="UserHubId", OtherKey="UserHubId", IsForeignKey=true)]
		public UserHub UserHub
		{
			get
			{
				return this._UserHub.Entity;
			}
			set
			{
				UserHub previousValue = this._UserHub.Entity;
				if (((previousValue != value) 
							|| (this._UserHub.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserHub.Entity = null;
						previousValue.Notes.Remove(this);
					}
					this._UserHub.Entity = value;
					if ((value != null))
					{
						value.Notes.Add(this);
						this._UserHubId = value.UserHubId;
					}
					else
					{
						this._UserHubId = default(System.Guid);
					}
					this.SendPropertyChanged("UserHub");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tasks")]
	public partial class Tasks : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TaskId;
		
		private string _TaskDetail;
		
		private string _AssignedTo;
		
		private System.Guid _UserHubId;
		
		private bool _Completed;
		
		private bool _Hidden;
		
		private System.DateTime _DatePosted;
		
		private EntityRef<UserHub> _UserHub;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskIdChanging(System.Guid value);
    partial void OnTaskIdChanged();
    partial void OnTaskDetailChanging(string value);
    partial void OnTaskDetailChanged();
    partial void OnAssignedToChanging(string value);
    partial void OnAssignedToChanged();
    partial void OnUserHubIdChanging(System.Guid value);
    partial void OnUserHubIdChanged();
    partial void OnCompletedChanging(bool value);
    partial void OnCompletedChanged();
    partial void OnHiddenChanging(bool value);
    partial void OnHiddenChanged();
    partial void OnDatePostedChanging(System.DateTime value);
    partial void OnDatePostedChanged();
    #endregion
		
		public Tasks()
		{
			this._UserHub = default(EntityRef<UserHub>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TaskId
		{
			get
			{
				return this._TaskId;
			}
			set
			{
				if ((this._TaskId != value))
				{
					this.OnTaskIdChanging(value);
					this.SendPropertyChanging();
					this._TaskId = value;
					this.SendPropertyChanged("TaskId");
					this.OnTaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskDetail", DbType="NChar(200) NOT NULL", CanBeNull=false)]
		public string TaskDetail
		{
			get
			{
				return this._TaskDetail;
			}
			set
			{
				if ((this._TaskDetail != value))
				{
					this.OnTaskDetailChanging(value);
					this.SendPropertyChanging();
					this._TaskDetail = value;
					this.SendPropertyChanged("TaskDetail");
					this.OnTaskDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignedTo", DbType="NChar(50)")]
		public string AssignedTo
		{
			get
			{
				return this._AssignedTo;
			}
			set
			{
				if ((this._AssignedTo != value))
				{
					this.OnAssignedToChanging(value);
					this.SendPropertyChanging();
					this._AssignedTo = value;
					this.SendPropertyChanged("AssignedTo");
					this.OnAssignedToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserHubId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserHubId
		{
			get
			{
				return this._UserHubId;
			}
			set
			{
				if ((this._UserHubId != value))
				{
					if (this._UserHub.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserHubIdChanging(value);
					this.SendPropertyChanging();
					this._UserHubId = value;
					this.SendPropertyChanged("UserHubId");
					this.OnUserHubIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Completed", DbType="Bit NOT NULL")]
		public bool Completed
		{
			get
			{
				return this._Completed;
			}
			set
			{
				if ((this._Completed != value))
				{
					this.OnCompletedChanging(value);
					this.SendPropertyChanging();
					this._Completed = value;
					this.SendPropertyChanged("Completed");
					this.OnCompletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="Bit NOT NULL")]
		public bool Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged("Hidden");
					this.OnHiddenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatePosted", DbType="DateTime NOT NULL")]
		public System.DateTime DatePosted
		{
			get
			{
				return this._DatePosted;
			}
			set
			{
				if ((this._DatePosted != value))
				{
					this.OnDatePostedChanging(value);
					this.SendPropertyChanging();
					this._DatePosted = value;
					this.SendPropertyChanged("DatePosted");
					this.OnDatePostedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserHub_Task", Storage="_UserHub", ThisKey="UserHubId", OtherKey="UserHubId", IsForeignKey=true)]
		public UserHub UserHub
		{
			get
			{
				return this._UserHub.Entity;
			}
			set
			{
				UserHub previousValue = this._UserHub.Entity;
				if (((previousValue != value) 
							|| (this._UserHub.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserHub.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._UserHub.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._UserHubId = value.UserHubId;
					}
					else
					{
						this._UserHubId = default(System.Guid);
					}
					this.SendPropertyChanged("UserHub");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private string _Username;
		
		private string _Forename;
		
		private string _Surname;
		
		private string _Password;
		
		private System.DateTime _DOB;
		
		private string _Email;
		
		private System.Guid _CurrentHub;
		
		private System.DateTime _LastLogin;
		
		private EntitySet<UserHub> _UserHubs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnForenameChanging(string value);
    partial void OnForenameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnDOBChanging(System.DateTime value);
    partial void OnDOBChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnCurrentHubChanging(System.Guid value);
    partial void OnCurrentHubChanged();
    partial void OnLastLoginChanging(System.DateTime value);
    partial void OnLastLoginChanged();
    #endregion
		
		public User()
		{
			this._UserHubs = new EntitySet<UserHub>(new Action<UserHub>(this.attach_UserHubs), new Action<UserHub>(this.detach_UserHubs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Forename", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Forename
		{
			get
			{
				return this._Forename;
			}
			set
			{
				if ((this._Forename != value))
				{
					this.OnForenameChanging(value);
					this.SendPropertyChanging();
					this._Forename = value;
					this.SendPropertyChanged("Forename");
					this.OnForenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NChar(40) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="Date NOT NULL")]
		public System.DateTime DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentHub", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CurrentHub
		{
			get
			{
				return this._CurrentHub;
			}
			set
			{
				if ((this._CurrentHub != value))
				{
					this.OnCurrentHubChanging(value);
					this.SendPropertyChanging();
					this._CurrentHub = value;
					this.SendPropertyChanged("CurrentHub");
					this.OnCurrentHubChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLogin", DbType="DateTime NOT NULL")]
		public System.DateTime LastLogin
		{
			get
			{
				return this._LastLogin;
			}
			set
			{
				if ((this._LastLogin != value))
				{
					this.OnLastLoginChanging(value);
					this.SendPropertyChanging();
					this._LastLogin = value;
					this.SendPropertyChanged("LastLogin");
					this.OnLastLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserHub", Storage="_UserHubs", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UserHub> UserHubs
		{
			get
			{
				return this._UserHubs;
			}
			set
			{
				this._UserHubs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserHubs(UserHub entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserHubs(UserHub entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserHub")]
	public partial class UserHub : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserHubId;
		
		private System.Guid _UserId;
		
		private System.Guid _HubId;
		
		private bool _HubAdmin;
		
		private EntitySet<HubEvent> _HubEvents;
		
		private EntitySet<Notes> _Notes;
		
		private EntitySet<Tasks> _Tasks;
		
		private EntityRef<Hub> _Hub;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserHubIdChanging(System.Guid value);
    partial void OnUserHubIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnHubIdChanging(System.Guid value);
    partial void OnHubIdChanged();
    partial void OnHubAdminChanging(bool value);
    partial void OnHubAdminChanged();
    #endregion
		
		public UserHub()
		{
			this._HubEvents = new EntitySet<HubEvent>(new Action<HubEvent>(this.attach_HubEvents), new Action<HubEvent>(this.detach_HubEvents));
			this._Notes = new EntitySet<Notes>(new Action<Notes>(this.attach_Notes), new Action<Notes>(this.detach_Notes));
			this._Tasks = new EntitySet<Tasks>(new Action<Tasks>(this.attach_Tasks), new Action<Tasks>(this.detach_Tasks));
			this._Hub = default(EntityRef<Hub>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserHubId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserHubId
		{
			get
			{
				return this._UserHubId;
			}
			set
			{
				if ((this._UserHubId != value))
				{
					this.OnUserHubIdChanging(value);
					this.SendPropertyChanging();
					this._UserHubId = value;
					this.SendPropertyChanged("UserHubId");
					this.OnUserHubIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HubId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid HubId
		{
			get
			{
				return this._HubId;
			}
			set
			{
				if ((this._HubId != value))
				{
					if (this._Hub.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHubIdChanging(value);
					this.SendPropertyChanging();
					this._HubId = value;
					this.SendPropertyChanged("HubId");
					this.OnHubIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HubAdmin", DbType="Bit NOT NULL")]
		public bool HubAdmin
		{
			get
			{
				return this._HubAdmin;
			}
			set
			{
				if ((this._HubAdmin != value))
				{
					this.OnHubAdminChanging(value);
					this.SendPropertyChanging();
					this._HubAdmin = value;
					this.SendPropertyChanged("HubAdmin");
					this.OnHubAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserHub_HubEvent", Storage="_HubEvents", ThisKey="UserHubId", OtherKey="UserHubId")]
		public EntitySet<HubEvent> HubEvents
		{
			get
			{
				return this._HubEvents;
			}
			set
			{
				this._HubEvents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserHub_Note", Storage="_Notes", ThisKey="UserHubId", OtherKey="UserHubId")]
		public EntitySet<Notes> Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				this._Notes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserHub_Task", Storage="_Tasks", ThisKey="UserHubId", OtherKey="UserHubId")]
		public EntitySet<Tasks> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hub_UserHub", Storage="_Hub", ThisKey="HubId", OtherKey="HubId", IsForeignKey=true)]
		public Hub Hub
		{
			get
			{
				return this._Hub.Entity;
			}
			set
			{
				Hub previousValue = this._Hub.Entity;
				if (((previousValue != value) 
							|| (this._Hub.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hub.Entity = null;
						previousValue.UserHubs.Remove(this);
					}
					this._Hub.Entity = value;
					if ((value != null))
					{
						value.UserHubs.Add(this);
						this._HubId = value.HubId;
					}
					else
					{
						this._HubId = default(System.Guid);
					}
					this.SendPropertyChanged("Hub");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserHub", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserHubs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserHubs.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HubEvents(HubEvent entity)
		{
			this.SendPropertyChanging();
			entity.UserHub = this;
		}
		
		private void detach_HubEvents(HubEvent entity)
		{
			this.SendPropertyChanging();
			entity.UserHub = null;
		}
		
		private void attach_Notes(Notes entity)
		{
			this.SendPropertyChanging();
			entity.UserHub = this;
		}
		
		private void detach_Notes(Notes entity)
		{
			this.SendPropertyChanging();
			entity.UserHub = null;
		}
		
		private void attach_Tasks(Tasks entity)
		{
			this.SendPropertyChanging();
			entity.UserHub = this;
		}
		
		private void detach_Tasks(Tasks entity)
		{
			this.SendPropertyChanging();
			entity.UserHub = null;
		}
	}
}
#pragma warning restore 1591
